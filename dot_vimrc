if has('vim_starting')
  set nocompatible               " be iMproved
  set rtp+=~/.vim/bundle/neobundle.vim/
endif

filetype off

call neobundle#rc(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" Github Bundles
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-scripts/vimwiki'
NeoBundle 'sjl/badwolf'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'sjl/gundo.vim'
"NeoBundle 'ervandew/supertab' "Might be slow
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'rking/ag.vim'
"NeoBundle 'slim-template/vim-slim'
NeoBundle 'othree/html5.vim'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'Valloric/YouCompleteMe.git' , {
            \ 'build' : {
            \      'unix' : './install.sh --clang-completer',
            \      'mac' : './install.sh --clang-completer'
            \   },
            \ }
NeoBundle 'wikitopian/hardmode'
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'Lokaltog/vim-easymotion'

" Dash
NeoBundle 'rizzatti/funcoo.vim'
NeoBundle 'rizzatti/dash.vim'
nmap <silent><leader>vd :Dash<CR>

" Haskell
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'dag/vim2hs'
NeoBundle 'ujihisa/neco-ghc'
NeoBundle 'Twinside/vim-haskellFold'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
autocmd FileType haskell noremap <buffer> <leader>q :GhcModType<cr>

" Erlang
NeoBundle 'oscarh/vimerl'

" Elixir
NeoBundle 'elixir-lang/vim-elixir'
NeoBundle 'mattonrails/vim-mix.git'
"NeoBundle 'carlosgaldino/elixir-snippets'
autocmd BufRead,BufNewFile *.eex set filetype=eruby.html
autocmd FileType elixir noremap <buffer> <leader>t :!mix test<cr>

" Python
NeoBundle 'davidhalter/jedi-vim'
NeoBundle 'klen/python-mode'
let g:pymode_rope = 0

" Javascript
NeoBundle 'nono/vim-handlebars'
NeoBundle 'kchmck/vim-coffee-script'
autocmd BufRead,BufNewFile *.litcoffee set filetype=markdown

" Ruby
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-bundler'
NeoBundle 'tpope/vim-rake'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'thoughtbot/vim-rspec'
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
highlight Pmenu ctermbg=238 gui=bold

autocmd BufEnter * inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
autocmd BufEnter * inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
autocmd BufNewFile,BufRead *.ck setf ck 

" Style
filetype plugin indent on     " required!
highlight Pmenu ctermbg=238 gui=bold

"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_mode_map={ 'mode': 'active', 'active_filetypes': [], 'passive_filetypes': ['html', 'vimwiki', 'vim'] }
let g:SuperTabDefaultCompletionType = "context"
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 0

set vb
set guifont=Menlo_Regular:h12
set guioptions-=T  "remove toolbar
set t_Co=256
set expandtab
set shiftwidth=2
set softtabstop=2
set ignorecase
set smartcase
set hlsearch
set incsearch
set rnu
set number
set background=dark
set list listchars=tab:>>,eol:¬,trail:·
set encoding=utf-8 " Necessary to show Unicode glyphs
set wildmenu
set wildmode=full
set omnifunc=syntaxcomplete#Complete
set clipboard=unnamed
set cursorline
set cursorcolumn
set foldmethod=indent
"set spell spelllang=en_us

nnoremap Y y$

noremap <silent> <Right> <c-w>l
noremap <silent> <Left> <c-w>h
noremap <silent> <Up> <c-w>k
noremap <silent> <Down> <c-w>j

let mapleader = ','
noremap <leader>f :CtrlP<CR>
noremap <silent> <leader>c mpgg=G<CR>:%s/\s\+$//g<CR>`p
noremap <leader>d :NERDTreeToggle<CR>
noremap <leader>b :CtrlPBuffer<CR>
noremap <leader>t :TlistToggle<CR>
noremap <leader>u :GundoToggle<CR>
noremap <leader>w :w<CR>
noremap <leader>ss :Ag 
noremap <leader>sp :setlocal spell! spelllang=en_us<CR>
noremap <leader>sn :UltiSnipsEdit<CR>
noremap <leader>. :e ~/.vimrc<CR>

nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

syntax enable
colorscheme jellybeans

let ruby_fold = 1

" Clear the search buffer when hitting return
function! MapCR()
  nnoremap <leader><cr> :nohlsearch<cr>
endfunction
call MapCR()

" Use space to toggle folds
nnoremap <Space> za

" Make vim very magic
" nnoremap / /\v

" Snippets
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"
let g:UltiSnipsListSnippets="<c-k>"

"function! g:UltiSnips_Complete()
"    call UltiSnips#ExpandSnippet()
"    if g:ulti_expand_res == 0
"        if pumvisible()
"            return "\<C-n>"
"        else
"            call UltiSnips_JumpForwards()
"            if g:ulti_jump_forwards_res == 0
"               return "\<TAB>"
"            endif
"        endif
"    endif
"    return ""
"endfunction
"au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsListSnippets="<c-e>"

NeoBundleCheck
